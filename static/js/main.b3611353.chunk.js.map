{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layout/Header.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","getStyle","props","todo","completed","borderBottom","textDecoration","inherits","createClass","key","value","_this$props$todo","id","title","react_default","a","createElement","style","type","onChange","markComplete","bind","onClick","delTodo","btnStyle","Component","background","color","border","padding","borderRadius","cursor","float","Todos","todos","map","components_TodoItem","linkStyle","Header","Link","to","marginLeft","AddTodo","state","e","setState","defineProperty","target","name","onSubmit","preventDefault","addTodo","display","placeholder","flex","className","About","Fragment","App","axios","delete","then","res","toConsumableArray","filter","post","data","_this2","get","_this3","BrowserRouter","layout_Header","Route","exact","path","render","components_AddTodo","components_Todos","component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.b3611353.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport class TodoItem extends Component {\n  getStyle = () => {\n    if (this.props.todo.completed) {\n      return {\n        borderBottom: \"1px #ccc dotted\",\n        textDecoration: \"line-through\"\n      };\n    } else {\n      return {\n        borderBottom: \"1px #ccc dotted\",\n        textDecoration: \"none\"\n      };\n    }\n  };\n\n  render() {\n    const { id, title } = this.props.todo;\n    return (\n      <div style={this.getStyle()}>\n        <p>\n          <input\n            type=\"checkbox\"\n            onChange={this.props.markComplete.bind(this, id)}\n          />{\" \"}\n          {title}{\" \"}\n          <button onClick={this.props.delTodo.bind(this, id)} style={btnStyle}>\n            x\n          </button>\n        </p>\n      </div>\n    );\n  }\n}\n\n// PropTypes\nTodoItem.propTypes = {\n  todo: PropTypes.object.isRequired,\n  markComplete: PropTypes.func.isRequired,\n  delTodo: PropTypes.func.isRequired\n};\n\nconst btnStyle = {\n  background: \"#ff0000\",\n  color: \"#fff\",\n  border: \"none\",\n  padding: \"5px 9px\",\n  borderRadius: \"50%\",\n  cursor: \"pointer\",\n  float: \"right\"\n};\n\nexport default TodoItem;\n","import React, { Component } from \"react\";\nimport TodoItem from \"./TodoItem\";\nimport PropTypes from \"prop-types\";\n\nclass Todos extends Component {\n  render() {\n    // console.log(this.props.todos);\n    return this.props.todos.map(todo => (\n      <TodoItem\n        key={todo.id}\n        todo={todo}\n        markComplete={this.props.markComplete}\n        delTodo={this.props.delTodo}\n      />\n    ));\n  }\n}\n\n// PropTypes\nTodos.propTypes = {\n  todos: PropTypes.array.isRequired,\n  markComplete: PropTypes.func.isRequired,\n  delTodo: PropTypes.func.isRequired\n};\n\nexport default Todos;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nfunction Header() {\n  return (\n    <div>\n      <h1>TodoList</h1>\n      <Link style={linkStyle} to=\"/\">\n        Home\n        <h3 style={{ marginLeft: \"10\" }}> </h3>\n      </Link>\n      <Link style={linkStyle} to=\"/about\">\n        About\n      </Link>\n    </div>\n  );\n}\n\nconst linkStyle = {\n  //   color: \"#fff\",\n  textDecoration: \"none\"\n};\nexport default Header;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport class AddTodo extends Component {\n  state = {\n    title: \"\"\n  };\n\n  onChange = e =>\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n\n  onSubmit = e => {\n    e.preventDefault();\n    this.props.addTodo(this.state.title);\n    this.setState({ title: \"\" });\n  };\n  render() {\n    return (\n      <form style={{ display: \"flex\" }} onSubmit={this.onSubmit}>\n        <input\n          type=\"text\"\n          name=\"title\"\n          placeholder=\"Add Todo ...\"\n          style={{ flex: \"10\", padding: \"5px\" }}\n          value={this.state.title}\n          onChange={this.onChange}\n        />\n        <input\n          type=\"submit\"\n          value=\"Submit\"\n          className=\"btn\"\n          style={{ flex: 1 }}\n        />\n      </form>\n    );\n  }\n}\n\n// PropTypes\nAddTodo.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n  markComplete: PropTypes.func.isRequired,\n  delTodo: PropTypes.func.isRequired\n};\n\nexport default AddTodo;\n","import React from \"react\";\n\nfunction About() {\n  return (\n    <React.Fragment>\n      <h1>About</h1>\n      <p>This is the About Page for my todo list made by Kartik kulkarni</p>\n    </React.Fragment>\n  );\n}\n\nexport default About;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Todos from \"./components/Todos\";\nimport Header from \"./components/layout/Header\";\nimport AddTodo from \"./components/AddTodo\";\nimport About from \"./components/pages/About\";\nimport uuid from \"uuid\";\n\nimport \"./App.css\";\n\nimport axios from \"axios\";\n\nclass App extends Component {\n  state = {\n    todos: []\n  };\n\n  componentDidMount() {\n    axios\n      .get(\"https://jsonplaceholder.typicode.com/todos?limit=10\")\n      .then(res => this.setState({ todos: res.data }));\n  }\n\n  markComplete = id => {\n    this.setState({\n      todos: this.state.todos.map(todo => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      })\n    });\n  };\n\n  // for local deleteTodo\n\n  // delTodo = id => {\n  //   this.setState({\n  //     todos: [...this.state.todos.filter(todo => todo.id !== id)]\n  //   });\n  // };\n\n  delTodo = id => {\n    axios.delete(\"https://jsonplaceholder.typicode.com/todos/${id}\").then(res =>\n      this.setState({\n        todos: [...this.state.todos.filter(todo => todo.id !== id)]\n      })\n    );\n  };\n\n  // for local addTodo\n\n  // addTodo = title => {\n  //   const newTodo = {\n  //     id: uuid.v4(),\n  //     title,\n  //     completed: false\n  //   };\n  //   this.setState({\n  //     todos: [...this.state.todos, newTodo]\n  //   });\n  // };\n\n  addTodo = title => {\n    axios\n      .post(\"https://jsonplaceholder.typicode.com/todos\", {\n        title,\n        completed: false\n      })\n      .then(res =>\n        this.setState({\n          todos: [...this.state.todos, res.data]\n        })\n      );\n  };\n\n  render() {\n    // console.log(this.state.todos);\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n\n            <Route\n              exact\n              path=\"/\"\n              render={props => (\n                <React.Fragment>\n                  <AddTodo addTodo={this.addTodo} />\n                  <Todos\n                    todos={this.state.todos}\n                    markComplete={this.markComplete}\n                    delTodo={this.delTodo}\n                  />\n                </React.Fragment>\n              )}\n            />\n\n            <Route path=\"/about\" component={About} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}